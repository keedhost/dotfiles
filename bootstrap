#!/bin/bash

### By Andrii Kondratiev ###

COMMON_PACKAGES="git zsh vim fzf curl wget tcpdump wireshark minicom neovim neofetch"
LINUX_PACKAGES="python3-pip mc"
BREW_PACKAGES="midnight-commander ipython bpython"
PYTHON_PACKAGES="thefuck ipython bpython"

# Colors
end="\033[0m"
red="\033[0;31m"
green="\033[0;32m"
yellow="\033[0;33m"

function info {
    echo -e "${green}=== ${1} === ${end}"
}

function error {
    echo -e "${red}=== ${1} === ${end}"
}

function warn {
    echo -e "${yellow}=== ${1} === ${end}"
}

function create_dir {
		[ ! -d $1 ] && mkdir -p $1
}
function NERD-fonts-install {
	FONT_URL="https://github.com/ryanoasis/nerd-fonts/raw/HEAD/patched-fonts/DroidSansMono/complete/Droid%20Sans%20Mono%20Nerd%20Font%20Complete.otf"
	if [[ $OS = "Linux" ]]; then
		create_dir "$HOME/.local/share/fonts"
		# [ ! -d ~/.local/share/fonts ] && mkdir -p ~/.local/share/fonts
		cd $HOME/.local/share/fonts && curl -fLo "Droid Sans Mono for Powerline Nerd Font Complete.otf" ${FONT_URL}
	elif [[ $OS = "macOS" ]]; then
		create_dir "$HOME/Library/Fonts"
		cd $HOME/Library/Fonts && \
		curl -fLo "Droid Sans Mono for Powerline Nerd Font Complete.otf" ${FONT_URL}
	else
		warn "$OS does not supported for now. NERD font will not be installed"
	fi
}

function docker-install {
	### Manual: https://computingforgeeks.com/install-docker-ce-on-linux-systems/
	DOCKER_PACKAGES="docker-ce docker-ce-cli containerd.io docker-compose-plugin"
	if [[ $OS = "Linux" ]]; then
		sudo rm -v /etc/apt/keyrings/docker.gpg
		sudo mkdir -p /etc/apt/keyrings && \
		curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
		sudo chmod a+r /etc/apt/keyrings/docker.gpg
	fi

	if [[ $Distro = "Debian" ]]; then
		### Script for Debian ###
		info "Check that docker repo exists..."
		[ ! -f /etc/apt/sources.list.d/docker.list ] && \
			info "Docker repo does not exists. Adding..."; \
			echo \
  				"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
  				$(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
			sudo apt update
			sudo apt install -y \
						lsb-release \
						gnupg2 \
						apt-transport-https \
						ca-certificates \
						curl \
						software-properties-common
			sudo apt install -y $DOCKER_PACKAGES
	elif [[ $Distro = "RedHat" ]]; then
		### Script for RedHat based linux distro ###
		sudo dnf -y install dnf-plugins-core
		sudo dnf config-manager --add-repo \
				https://download.docker.com/linux/fedora/docker-ce.repo
		sudo dnf -y install $DOCKER_PACKAGES
	elif [[ $Distro = "SuSe" ]]; then
		sles_version="$(. /etc/os-release && echo "${VERSION_ID##*.}")"
		opensuse_repo="https://download.opensuse.org/repositories/security:SELinux/SLE_15_SP$sles_version/security:SELinux.repo"
		sudo zypper addrepo $opensuse_repo
		sudo zypper addrepo https://download.docker.com/linux/sles/docker-ce.repo
 		sudo zypper install $DOCKER_PACKAGES


	fi
	sudo systemctl start docker && sudo systemctl enable docker
	sudo usermod -aG docker $USER
	docker version
}

### Ask before replace the configurations
if [[ $1 = "--noask" ]]; then
    info "Runs in quiet mode"
else
	while true; do
	    read -p "This script will remove your current settings for zhs and vim. Do it? (yes/no) " yn
	    case $yn in 
		yes ) info "OK, we will proceed";
		break;;
		no ) info "Exiting...";
			exit 0;;
		* ) info "Only \"yes\" or \"no\" accepts";;
	    esac
	done
fi

function check_git_access {
	create_dir "$HOME/.ssh/" && chmod -v 700 ~/.ssh/
	ssh-keyscan github.com >> $HOME/.ssh/known_hosts
    info "Check if I have access to my GitHub private repos..."
    ssh -q git@github.com 1> /dev/null 2>& 1
    if [ $? -eq 1 ] ; then
	    info "SSH connection to git established"
        info "Using \"git@github.com:keedhost\" as url"
        git_url="git@github.com:keedhost"
    else
	    warn "Coul'd not connect to the GitHub private repos."
	    info "Possible solutions:"
	    info "1. Check internet connections"
	    info "2. Check that SSH keys installed"
	    info "3. Check SSH keys permissions:"
    	info "\t chown -R $USER. ~/.ssh"
	    info "\t chmod 700 ~/.ssh"
    	info "\t chmod 600 ~/.ssh/*"
	    info "\t chmod 644 ~/.ssh/*.pub"
	    info "---------------------------------"
        info "Using \"https://github.com/keedhost\" as url"
        git_url="https://github.com/keedhost"
    fi
}

check_git_access

function install_packages {
	uname -a
	OS="`uname`"
	case $OS in
	  	'Linux')
	    	OS='Linux'
	    	NERD-fonts-install
	    	if [ -f /etc/redhat-release ]; then
               	Distro='RedHat'
	           	info "Found $Distro $OS."
	           	docker-install
		       	sudo dnf install -y $COMMON_PACKAGES $LINUX_PACKAGES
    		elif [ grep -q "openSUSE Tumbleweed" /etc/issue ]; then
            	Distro='SuSe'
	            info "Found $Distro $OS."
	            docker-install
		    	sudo zypper install -y $COMMON_PACKAGES $LINUX_PACKAGES
    		elif [ -f /etc/debian_version ]; then
            	Distro='Debian'
	            info "Found $Distro $OS."
	            echo "wireshark-common wireshark-common/install-setuid boolean true" | sudo debconf-set-selections
	            sudo apt install -y --force-yes --allow-change-held-packages $COMMON_PACKAGES $LINUX_PACKAGES
				docker-install
			neofetch
    		fi
	    	;;
	  	'FreeBSD')
	    	OS='FreeBSD'
	    	info "Found $OS"
	    	su -c "pkg install $1"
	    	;;
	  	'WindowsNT')
	    	OS='Windows'
	    	warn "Found $OS"
	    	error "Currently not supported by script"
	    	exit 2
	    	;;
	  	'Darwin') 
	    	OS='macOS'
	    	info "Found $OS"
	    	info "Installing brew packages"
			brew install $COMMON_PACKAGES $BREW_PACKAGES
			NERD-fonts-install
			neofetch
	    	;;
	  	'SunOS')
	    	OS='Solaris'
	    	warn "Found $OS"
	    	error "Currently not supported by script"
	    	exit 2
	    ;;
	  	*)
			error "Unknown operation system. Exiting..."
			exit 3
		;;
	esac
}
env
exit 1488

install_packages

info "Start installing config files"
info "Installing vim config"
[ -d "$HOME/.vim" ] && mv -v $HOME/.vim $HOME/.vim-$(date +%d-%m-%Y-at-%H-%m)
git clone ${git_url}/vim.git $HOME/.vim
git clone https://github.com/gmarik/Vundle.vim.git $HOME/.vim/bundle/Vundle.vim
ln -sfv ~/.vim/vimrc ~/.vimrc

# Install vim plugins from terminal
# vim +'PlugInstall --sync' +qa
# vim +PluginInstall +qall

# Install vim plugins from CI
vim -E -s -u "$HOME/.vimrc" +PluginInstall +qall
vim -E -s -u "$HOME/.vimrc" "PlugInstall --sync" +qa

info "Installing zsh config"
[ -d "$HOME/.zsh" ] && mv -v ~/.zsh ~/.zsh-$(date +%d-%m-%Y-at-%H-%m)
if [[ $git_url = "https://github.com/keedhost" ]]; then
	info "Switch git modules url to http if not possible to connect via ssh"
	git clone ${git_url}/zsh.git ~/.zsh
	sed -i 's/git@github.com:/https:\/\/github.com\//g' "$HOME/.zsh/.gitmodules"
	info "Gitmodules URL changed to HTTP"
	git -C $HOME/.zsh/oh-my-zsh submodule update --init --recursive --progress  --remote
else
	git clone --recurse-submodules ${git_url}/zsh.git ~/.zsh --recursive --progress  --remote
fi
ln -sf $HOME/.zsh/zshrc $HOME/.zshrc
chsh -s $(which zsh)
python3 -m pip install $PYTHON_PACKAGES

info "Install NVIM config"
git clone ${git_url}/nvim.git ~/.config/nvim
git clone https://github.com/VundleVim/Vundle.vim.git ~/.config/nvim/bundle/Vundle.vim
sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
git clone --depth 1 https://github.com/wbthomason/packer.nvim \
       $HOME/.local/share/nvim/site/pack/packer/start/packer.nvim
nvim --headless +'PlugInstall --sync' +qa
nvim --headless +PluginInstall +qall
